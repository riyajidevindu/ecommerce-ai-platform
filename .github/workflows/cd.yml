name: CD

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

env:
  AWS_REGION: us-east-1

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          GIT_SHA: ${{ github.sha }}
        run: |
          set -e
          # Build and push per service
          declare -a services=(
            "auth-service"
            "stock-service"
            "whatsapp-connector-service"
            "ai-orchestrator-service"
            "notification-service"
            "file-storage-service"
          )
          for svc in "${services[@]}"; do
            docker build -t "$ECR_REGISTRY/$svc:latest" -t "$ECR_REGISTRY/$svc:$GIT_SHA" "services/$svc"
            docker push "$ECR_REGISTRY/$svc:latest"
            docker push "$ECR_REGISTRY/$svc:$GIT_SHA"
          done
          # Frontend build image (optional) - if serving with Nginx container
          docker build -t "$ECR_REGISTRY/frontend:latest" -t "$ECR_REGISTRY/frontend:$GIT_SHA" frontend
          docker push "$ECR_REGISTRY/frontend:latest"
          docker push "$ECR_REGISTRY/frontend:$GIT_SHA"

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout manifests
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Deploy manifests (placeholder)
        run: |
          # kubectl apply -k k8s/overlays/prod
          echo "Apply your Kubernetes manifests or Helm chart here."

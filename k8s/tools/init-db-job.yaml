apiVersion: v1
kind: ConfigMap
metadata:
  name: db-init-sql
  namespace: ecommerce
data:
  init-db.sql: |-
    -- Ensure role exists with desired password
    DO $$ BEGIN
      IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = 'user') THEN
        CREATE ROLE "user" WITH LOGIN PASSWORD 'password';
      ELSE
        ALTER ROLE "user" WITH PASSWORD 'password';
      END IF;
    END $$;

    -- Create databases if missing (CREATE DATABASE cannot run inside DO $$)
    SELECT 'CREATE DATABASE auth_db OWNER "user"' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'auth_db')\gexec
    SELECT 'CREATE DATABASE stock_db OWNER "user"' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'stock_db')\gexec
    SELECT 'CREATE DATABASE whatsapp_db OWNER "user"' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'whatsapp_db')\gexec
    SELECT 'CREATE DATABASE ai_db OWNER "user"' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'ai_db')\gexec
---
apiVersion: batch/v1
kind: Job
metadata:
  name: db-init
  namespace: ecommerce
spec:
  backoffLimit: 0
  template:
    spec:
      restartPolicy: Never
      containers:
        - name: psql
          image: docker.io/bitnami/postgresql:17.6.0-debian-12-r0
          command: ["/bin/bash","-lc","/opt/bitnami/postgresql/bin/psql -h postgres -U postgres -f /scripts/init-db.sql"]
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-postgresql
                  key: postgres-password
          volumeMounts:
            - name: sql
              mountPath: /scripts
      volumes:
        - name: sql
          configMap:
            name: db-init-sql
            items:
              - key: init-db.sql
                path: init-db.sql
